{"/home/travis/build/npmtest/node-npmtest-grunt-ftp-push/test.js":"/* istanbul instrument in package npmtest_grunt_ftp_push */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-ftp-push/lib.npmtest_grunt_ftp_push.js":"/* istanbul instrument in package npmtest_grunt_ftp_push */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_ftp_push = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_ftp_push = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-ftp-push/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-ftp-push && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_ftp_push */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_ftp_push\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_ftp_push.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_ftp_push.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_ftp_push.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_ftp_push.__dirname + '/lib.npmtest_grunt_ftp_push.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-ftp-push/node_modules/grunt-ftp-push/Gruntfile.js":"/*\n * grunt-ftp-push\n * http://robert-w.github.io/grunt-ftp-push\n *\n * Copyright (c) 2013 Robert Winterbottom\n * Licensed under the MIT license.\n */\n\nmodule.exports = function(grunt) {\n  'use strict';\n  // Project configuration.\n  grunt.initConfig({\n\n    ftp_push: {\n      default: {\n        options: {\n          authKey: 'serverA',\n          host: 'sample.server.com',\n          dest: '/html/test/',\n          port: 21\n        },\n        files: [ // Enable Dynamic Expansion, Src matches are relative to this path, Actual Pattern(s) to match\n          {expand: true, cwd: 'files/nested/another', src: ['*.js'], dest: './files/js'},\n          {expand: true, cwd: './', src: ['files/js/**/*.js']}\n        ]\n      },\n\n      sample: {\n        options: {\n          host: 'sample.server.com',\n          dest: '/html/test/',\n          username: 'myUsername',\n          password: 'myPassword',\n          debug: true // Show JSFTP Debugging information\n        },\n        files: [\n          {expand: true, cwd: './', src: ['files/nested/another/sample.js']}\n        ]\n      },\n\n      local: {\n        options: {\n          host: '127.0.0.1',\n          dest: './',\n          username: 'local_user',\n          password: '12345',\n          port: 3334\n        },\n        files: [\n          {expand: true, cwd: './', src: ['files/js/**/*.js']}\n        ]\n      }\n\n    }\n\n  });\n\n  // Actually load this plugin's task(s).\n  grunt.loadTasks('tasks');\n\n  grunt.registerTask('default', ['ftp_push:default']);\n  grunt.registerTask('sample', ['ftp_push:sample']);\n  grunt.registerTask('local', ['ftp_push:local']);\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-ftp-push/node_modules/grunt-ftp-push/tasks/cache.js":"var path = require('path');\nvar fs = require('fs');\n\nvar cachePath = path.join(__dirname, '_filecache.json');\n\nmodule.exports = {\n  get: function () { return JSON.parse(fs.readFileSync(cachePath, 'utf-8')); },\n  set: function (cache) { fs.writeFileSync(cachePath, JSON.stringify(cache)); }\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-ftp-push/node_modules/grunt-ftp-push/tasks/ftp_push.js":"/*\n * grunt-ftp\n * https://github.com/Robert-W/grunt-ftp\n *\n * Copyright (c) 2013 Robert Winterbottom\n * Licensed under the MIT license.\n */\nvar messages = require('./messages');\nvar cache = require('./cache');\nvar utils = require('./utils');\nvar path = require('path');\nvar Ftp = require('jsftp');\n\nmodule.exports = function (grunt) {\n  'use strict';\n\n  var basepath,\n      options,\n      server,\n      done;\n\n  /**\n  * Based off of whats in the options, create a credentials object\n  * @param {object} options - grunt options provided to the plugin\n  * @return {object} {username: '...', password: '...'}\n  */\n  var getCredentials = function getCredentials(gruntOptions) {\n    if (gruntOptions.authKey && grunt.file.exists('.ftpauth')) {\n      return JSON.parse(grunt.file.read('.ftpauth'))[gruntOptions.authKey];\n    } else if (gruntOptions.username && gruntOptions.password) {\n      return { username: gruntOptions.username, password: gruntOptions.password };\n    } else {\n      // Warn the user we are attempting an anonymous login\n      grunt.log.warn(messages.anonymousLogin);\n      return { username: null, password: null };\n    }\n  };\n\n  /**\n  * Helper function that uses a recursive style for creating directories until none remain\n  * @param {array} directories - Array of directory paths that will be necessary to upload files\n  * @param {function} callback - function to trigger when all directories have been created\n  */\n  var pushDirectories = function pushDirectories(directories, callback) {\n    var index = 0;\n\n    /**\n    * Recursive helper used as callback for server.raw.mkd\n    * @param {error} err - Error message if something went wrong\n    */\n    var processDir = function processDir (err) {\n      // Fail if any error other then 550 is present, 550 is Directory Already Exists\n      // these directories must exist to continue\n      if (err) {\n        if (err.code !== 550) { grunt.fail.warn(err); }\n      } else {\n        grunt.log.ok(messages.directoryCreated(directories[index]));\n      }\n\n      ++index;\n      // If there is more directories to process then keep going\n      if (index < directories.length) {\n        server.raw.mkd(directories[index], processDir);\n      } else {\n        callback();\n      }\n    };\n\n    // Start processing dirs or end if none are present\n    if (index < directories.length) {\n      server.raw.mkd(directories[index], processDir);\n    } else {\n      callback();\n    }\n  };\n\n  /**\n  * Helper function that uses a recursive style for uploading files until none remain\n  * @param {object[]} files - Array of file objects to upload, {src: '...', dest: '...'}\n  */\n  var uploadFiles = function uploadFiles(files) {\n    var index = 0,\n        file = files[index];\n\n    /**\n    * Recursive helper used as callback for server.raw.put\n    * @param {error} err - Error message if something went wrong\n    */\n    var processFile = function processFile (err) {\n      if (err) {\n        grunt.log.warn(messages.fileTransferFail(file.dest, err));\n      } else {\n        grunt.log.ok(messages.fileTransferSuccess(file.dest));\n      }\n\n      ++index;\n      // If there are more files, then keep pushing\n      if (index < files.length) {\n        file = files[index];\n        server.put(grunt.file.read(file.src, { encoding: null }), file.dest, processFile);\n      } else {\n        // Close the connection, we are complete\n        server.raw.quit(function(quitErr) {\n          if (quitErr) {\n            grunt.log.error(quitErr);\n            done(false);\n          }\n          server.destroy();\n          grunt.log.ok(messages.connectionClosed);\n          done();\n        });\n      }\n    };\n\n    // Start uploading files\n    server.put(grunt.file.read(file.src, { encoding: null }), file.dest, processFile);\n  };\n\n  grunt.registerMultiTask('ftp_push', 'Transfer files using FTP.', function() {\n\n    var destinations,\n        updated,\n        files,\n        creds,\n        dirs;\n\n    // Merge task-specific and/or target-specific options with these defaults.\n    options = this.options({\n      incrementalUpdates: true,\n      // autoReconnect: true,\n      // reconnectLimit: 3,\n      hideCredentials: false,\n      keepAlive: 60000\n    });\n\n    // Tell Grunt not to finish until my async methods are completed, calling done() to finish\n    done = this.async();\n\n    // Check for minimum requirements\n    if (!utils.optionsAreValid(options)) {\n      grunt.log.warn(messages.invalidRequirements);\n      done(false);\n      return;\n    }\n\n    // If there are no files provided, bail out with a warning\n    if (this.files.length === 0) {\n      grunt.log.warn(messages.noFiles);\n      done(false);\n      return;\n    }\n\n    // Remove directories and invalid paths from this.files\n    this.files.forEach(function (file) {\n      file.src = file.src.filter(function (filepath) {\n        // If the file does not exist, remove it\n        if (!grunt.file.exists(filepath)) {\n          grunt.log.warn(messages.fileNotExist(filepath));\n          return false;\n        }\n        // If this is a file, keep it\n        return grunt.file.isFile(filepath);\n      });\n    });\n\n    // Basepath of where to push\n    basepath = path.posix.normalize(options.dest);\n    // Get Credentials\n    creds = getCredentials(options);\n    // Get list of file objects to push, containing src & path properties\n    files = utils.getFilePaths(basepath, this.files);\n    //- Only get changes if incrementalUpdates is on\n    if (options.incrementalUpdates) {\n      // Filter these files based on whether or not they have been updated since the last push\n      updated = utils.updateCacheGetChanges(cache.get(), files);\n      // set the cache and grab the updated files list\n      files = updated.files;\n      cache.set(updated.cache);\n    }\n    // Get a list of the required directories to push so the files can be uploaded\n    // getDirectoryPaths takes an array of strings, get a string[] of destinations\n    destinations = utils.getDestinations(files);\n    dirs = utils.getDirectoryPaths(destinations);\n    // Create the FileServer\n    server = new Ftp({\n      host: options.host,\n      port: options.port || 21,\n      debugMode: options.debug || false\n    });\n\n    // set keep alive\n    server.keepAlive(options.keepAlive);\n\n    // Log if in debug mode\n    if (options.debug) {\n      server.on('jsftp_debug', function(eventType, data) {\n        grunt.log.write(messages.debug(eventType));\n        grunt.log.write(JSON.stringify(data, null, 2));\n      });\n    }\n\n    //- If there are no files to push, bail now\n    if (options.incrementalUpdates && dirs && dirs.length === 0) {\n      console.log(messages.noNewFiles);\n      done();\n    }\n\n    // Authenticate with the server and begin pushing files up\n    server.auth(creds.username, creds.password, function(err) {\n      // Use <username> in out put if they chose to hide username\n      var usernameForOutput = options.hideCredentials ? '<username>' : creds.username;\n      // If there is an error, just fail\n      if (err) {\n        grunt.fail.fatal(messages.authFailure(usernameForOutput));\n      } else {\n        grunt.log.ok(messages.authSuccess(usernameForOutput));\n      }\n      // Push directories first\n      pushDirectories(dirs, function () {\n        // Directories have successfully been pushed, now upload files\n        uploadFiles(files);\n      });\n\n    });\n\n  });\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-ftp-push/node_modules/grunt-ftp-push/tasks/messages.js":"module.exports = {\n  invalidRequirements: 'You did not provide the minimum requirements.  Please refer to the following documentation for information. https://github.com/Robert-W/grunt-ftp-push#required-options',\n  anonymousLogin: 'Attempting anonymous login.',\n  connectionClosed: 'FTP connection closed!',\n  noNewFiles: 'No new files to push. If you want to force push all your files, set incrementalUpdates to true in your options.',\n  noFiles: 'No files detected. Pleade check your configuration.',\n  directoryCreated: function (directory) { return directory + ' directory created successfully.'; },\n  fileTransferFail: function (file, err) { return file + ' failed to transfer because ' + err; },\n  fileTransferSuccess: function (file) { return file + ' transferred successfully.'; },\n  fileNotExist: function (path) { return 'Source file ' + path + ' not found.'; },\n  authFailure: function (user) { return 'Could not authenticate with ' + user; },\n  authSuccess: function (user) { return user + ' successfully authenticated!'; },\n  debug: function (msg) { return 'DEBUG: ' + msg; }\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-ftp-push/node_modules/grunt-ftp-push/tasks/utils.js":"var path = require('path');\nvar fs = require('fs');\n\nvar utils = {\n  /**\n  * @description Check if the user has provided the required options\n  * @param {object} options - An options object should have two required options\n  * @return {bool} bool representing if the provided options are valid\n  */\n  optionsAreValid: function (options) {\n    return options.host !== undefined && options.dest !== undefined;\n  },\n\n  /**\n  * @description Trim the cwd from the filepath, so if cwd is foo and filepath is foo/bar/bacon.jam,\n  *     trim off the foo and only return the bar/bacon.jam\n  * @param {string} filepath - filepath we want to trim cwd from\n  * @param {string} cwd - the cwd to remove from the beginning of the path\n  * @return {string} filepath with the cwd removed or the provided path if the cwd is not valid\n  */\n  trimCwd: function (filepath, cwd) {\n    if (typeof cwd === 'string' && filepath.substr(0, cwd.length) === cwd) {\n      filepath = filepath.substr(cwd.length);\n    }\n    return path.posix.normalize(filepath);\n  },\n\n  /**\n  * @description Takes an array of file paths and returns an array of paths to use for pushing directories\n  *     For example, 'foo/bar/baz/file.js' => ['foo', 'foo/bar', 'foo/bar/baz']\n  * @param {string[]} filePaths - Array of filePaths, these will be decomposed into partial paths of\n  *     directories necessary for the file to be successfully pushed\n  * @return {string[]} returns an array of partial paths for required directories\n  */\n  getDirectoryPaths: function (filePaths) {\n    var directoryPaths = [],\n        regex = /\\//g,\n        partial,\n        match;\n\n    filePaths.forEach(function (filePath) {\n      if (filePath.length !== 1) {\n        filePath = path.posix.normalize(filePath);\n        while((match = regex.exec(filePath)) !== null) {\n          partial = filePath.slice(0, match.index);\n          if (directoryPaths.indexOf(partial) < 0 && partial !== '') {\n            directoryPaths.push(partial);\n          }\n        }\n      }\n    });\n\n    return directoryPaths;\n  },\n\n  /**\n  * @description Takes an array of file objects and returns an array of file paths, This will need to do a few things\n  *     it will need to trim cwd from paths, use optional relative destinations, and avoid duplicates\n  * @param {string} basePath - Base path provided by options.dest\n  * @param {object[]} files - Array of file objects found by grunt\n  * @return {object[]} returns a complete array of file path objects, {src: '...', dest: '...'}\n  */\n  getFilePaths: function (basePath, files) {\n    var filePaths = [],\n        destination;\n\n    // Files must be of type array, if not, return an empty array\n    if (Object.prototype.toString.call(files) !== '[object Array]') { return []; }\n\n    files.forEach(function (file) {\n      // For each src file we have\n      file.src.forEach(function (filepath) {\n        // Make sure the path is normalized\n        filepath = path.posix.normalize(filepath);\n        // Trim the cwd from the path to prepare it for the destination\n        destination = utils.trimCwd(filepath, file.orig.cwd);\n        // Set up the relative destination if one is provided\n        if (file.orig.dest) {\n          destination = path.posix.join(basePath, file.orig.dest, destination);\n        } else {\n          destination = path.posix.join(basePath, destination);\n        }\n        // If a files destination is not in the array, add the file, this matched on destination\n        if (!utils.arrayContainsFile(filePaths, destination)) {\n          filePaths.push({\n            src: filepath,\n            dest: destination\n          });\n        }\n\n      }); // Inner for-each\n\n    }); // Outer for-each\n\n    return filePaths;\n  },\n\n  /**\n  * @description Takes an array and a files destination path { src: '..', dest: '..' } and checks if the array contains it\n  * @param {object[]} files - Array of FilePath Objects\n  * @param {string} destination - Destination of the File\n  * @return {boolean} whether or not the array of files contained a file with the destination\n  */\n  arrayContainsFile: function (files, destination) {\n    return files.some(function (file) { return file.dest === destination; });\n  },\n\n  /**\n  * @description Takes an array of file objects and returns an array of destinations\n  * @param {object[]} files - Array of file objects found by grunt\n  * @return {string[]} returns an array of destinations, the destinations for the files about to be pushed\n  */\n  getDestinations: function (files) {\n    return files.map(function (file) { return file.dest; });\n  },\n\n  /**\n  * @description Takes a cache and an array of file objects. Updates the cache and returns files that have been modified\n  * @param {object} cache - Cache to update, simple Dictionary of type <string,string>(filename,mtime)\n  * @param {object[]} files - Array of file objects found by grunt\n  * @return {object<object<string, string>, object[]>} - returns the updated caches and a files object array containing changed files\n  */\n  updateCacheGetChanges: function (cache, files) {\n    var stats, mtime;\n\n    var changes = files.filter(function (file) {\n      stats = fs.statSync(file.src);\n      mtime = new Date(stats.mtime).getTime();\n\n      if (cache[file.src] === undefined || cache[file.src] < mtime) {\n        cache[file.src] = mtime;\n        return true;\n      } else {\n        return false;\n      }\n    });\n\n    return {\n      cache: cache,\n      files: changes\n    };\n  }\n\n};\n\nmodule.exports = utils;\n","/home/travis/build/npmtest/node-npmtest-grunt-ftp-push/node_modules/grunt-ftp-push/files/js/alert.js":"alert('hey');\n","/home/travis/build/npmtest/node-npmtest-grunt-ftp-push/node_modules/grunt-ftp-push/files/js/console.js":"console.log('something');\n","/home/travis/build/npmtest/node-npmtest-grunt-ftp-push/node_modules/grunt-ftp-push/files/nested/another/sample.js":"var num = 42;\nalert(num);"}